{"version":3,"sources":["components/AddPerson.js","components/FilterShown.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["AddPerson","_ref","addPerson","newName","handleNameChange","newNumber","handleNumberChange","react_default","a","createElement","onSubmit","value","onChange","type","FilterShown","filter","handleFilterChange","baseUrl","persons","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","concat","remove","delete","Notification","message","className","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","personObject","name","state","number","map","person","includes","window","confirm","find","p","changedPerson","objectSpread","personService","setState","notification","setTimeout","catch","error","newPerson","handleDeleteOf","target","_this2","_this3","filteredPersons","toLowerCase","startsWith","components_Notification","components_FilterShown","components_AddPerson","key","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05a2f4f7.chunk.js","sourcesContent":["import React from 'react'\n\nconst AddPerson = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n  return (\n    <div>\n      <form onSubmit={addPerson}>\n        <div>\n          nimi: <input\n            value={newName}\n            onChange={handleNameChange}\n          />\n        </div>\n        <div>\n          numero: <input\n            value={newNumber}\n            onChange={handleNumberChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">lisää</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default AddPerson","import React from 'react'\n\nconst FilterShown = ({ filter, handleFilterChange }) => {\n  return (\n    <div>\n      <form >\n        rajaa näytettäviä: <input\n          value={filter}\n          onChange={handleFilterChange}\n        />\n      </form>\n    </div>\n  )\n}\n\nexport default FilterShown","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react';\nimport AddPerson from './components/AddPerson';\nimport FilterShown from './components/FilterShown';\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [],\n      newName: '',\n      newNumber: '',\n      filter: '',\n      notification: null\n    }\n  }\n\n  componentDidMount() {\n    personService\n      .getAll()\n      .then(response => {\n        this.setState({ persons: response })\n      })\n  }\n\n  addPerson = (event) => {\n    event.preventDefault();\n    const personObject = {\n      name: this.state.newName,\n      number: this.state.newNumber\n    }\n    if (this.state.persons.map(person => person.name).includes(personObject.name)) {\n      if (window.confirm(`${personObject.name} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n        const person = this.state.persons.find(p => p.name === personObject.name)\n        const changedPerson = {...person, number: this.state.newNumber}\n        personService\n          .update(person.id, changedPerson)\n          .then(changedPerson => {\n            const persons = this.state.persons.filter(p => p.id !== person.id)\n            this.setState({\n              notification: `päivitettiin henkilön ${person.name} numero`,\n              persons: persons.concat(changedPerson)\n            })\n            setTimeout(() => {\n              this.setState({ notification: null })\n            }, 5000)\n          })\n          .catch(error => {\n            personService\n              .create(changedPerson)\n              .then(newPerson => {\n                personService\n                  .getAll()\n                  .then(persons => {\n                    this.setState({\n                      persons: persons,\n                      notification: `henkilö ${newPerson.name} oli jo poistettu ja nyt uudelleenlisätty`,\n                      newName: '',\n                      newNumber: ''\n                    })\n                    setTimeout(() => {\n                      this.setState({ notification: null })\n                    })\n                  })\n              })\n          })\n      }\n    }\n    else {\n      personService\n        .create(personObject)\n        .then(newPerson => {\n          this.setState({\n            notification: `lisättiin henkilö ${newPerson.name}`,\n            persons: this.state.persons.concat(newPerson),\n            newName: '',\n            newNumber: ''\n          })\n          setTimeout(() => {\n            this.setState({ notification: null })\n          }, 5000)\n        })\n    }\n  }\n\n  handleDeleteOf = (id) => {\n    return () => {\n      const person = this.state.persons.find(p => p.id === id)\n\n      if (window.confirm(`poistetaanko varmasti ${person.name}?`)) {\n        personService\n          .remove(id)\n          .then(response => {\n            this.setState({\n              notification: `poistettiin ${person.name}`,\n              persons: this.state.persons.filter(p => p.id !== id)\n          })\n          setTimeout(() => {\n            this.setState({ notification: null })\n          }, 5000)\n        })\n      }\n    }\n  }\n\n  handleNameChange = (event) => {\n    this.setState({ newName: event.target.value })\n  }\n\n  handleNumberChange = (event) => {\n    this.setState({ newNumber: event.target.value })\n  }\n\n  handleFilterChange = (event) => {\n    //console.log(event.target.value)\n    this.setState({ filter: event.target.value })\n  }\n\n  render() {\n    //const shownPersons = () => this.state.persons.map(person => <li>{person.name}</li>)\n    //console.log(this.state.persons.filter(person => person.name.toLowerCase().startsWith(this.state.filter.toLowerCase())))\n    const filteredPersons =\n      this.state.persons.filter(person => person.name.toLowerCase().startsWith(this.state.filter.toLowerCase()))\n\n    return (\n      <div>\n        <h2>Puhelinluettelo</h2>\n        <Notification message={this.state.notification} />\n        <div>\n          <FilterShown filter={this.state.filter} handleFilterChange={this.handleFilterChange} />\n        </div>\n        <h3>Lisää uusi / muuta olemassaolevaa numeroa</h3>\n        <AddPerson addPerson={this.addPerson} newName={this.state.newName} \n          handleNameChange={this.handleNameChange} newNumber={this.state.newNumber}\n          handleNumberChange={this.handleNumberChange}/>\n        <h2>Numerot</h2>\n          {filteredPersons.map(person => \n            <p key={person.name}>\n              {person.name} {person.number} <button onClick={this.handleDeleteOf(person.id)}>poista</button>\n            </p>)}\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}